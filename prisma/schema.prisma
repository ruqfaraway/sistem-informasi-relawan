generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int            @id @default(autoincrement())
  name       String?
  email      String         @db.VarChar
  password   String         @db.VarChar
  unit_id    String?
  role_id    Int
  created_at DateTime       @default(now()) @db.Timestamp(6)
  updated_at DateTime       @default(now()) @db.Timestamp(6)
  deleted_at DateTime?      @db.Timestamp(6)
  role       Role           @relation(fields: [role_id], references: [id])
  unit       VolunteerUnit? @relation(fields: [unit_id], references: [id])

  @@map("users")
}

model Role {
  id          Int     @id @default(autoincrement())
  role_name   String  @unique
  description String?
  users       User[]

  @@map("roles")
}

model VolunteerUnit {
  id         String      @id @default(uuid())
  name       String
  builder    String
  birth_date DateTime
  created_at DateTime    @default(now()) @db.Timestamp(6)
  updated_at DateTime    @default(now()) @db.Timestamp(6)
  deleted_at DateTime?   @db.Timestamp(6)
  users      User[]
  volunteers Volunteer[]

  @@map("volunteer_units")
}

model Volunteer {
  id                String         @id @default(uuid())
  volunteer_id      String         
  volunteer_type_id String
  unit_id           String
  religion_id       String
  education_id      String
  occupation_id     String
  position_id       String
  name              String
  born_place        String
  birth_date        DateTime
  gender            Gender
  blood_type        BloodType
  address           String
  phone             String
  email             String         @unique
  status            Status
  join_date         DateTime
  photo             String?
  period            String?
  isOfficer         Boolean        @default(false)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  deleted_at        DateTime?      @db.Timestamp(6)
  religion          Religion       @relation(fields: [religion_id], references: [id])
  education         EducationLevel @relation(fields: [education_id], references: [id])
  occupation        Occupation     @relation(fields: [occupation_id], references: [id])
  unit              VolunteerUnit  @relation(fields: [unit_id], references: [id])
  type              VolunteerType  @relation(fields: [volunteer_type_id], references: [id])
  position          Position       @relation(fields: [position_id], references: [id])
  @@map("volunteers")
}

model Religion {
  id         String      @id @default(uuid())
  code       String      @unique
  religion   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?   @db.Timestamp(6)
  volunteers Volunteer[]

  @@map("religions")
}

model Position {
  id         String      @id @default(uuid())
  code       String      @unique
  position   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?   @db.Timestamp(6)
  volunteers Volunteer[]

  @@map("positions")
}
model VolunteerType {
  id             String      @id @default(uuid())
  code           String      @unique
  volunteer_type String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  deleted_at     DateTime?   @db.Timestamp(6)
  volunteers     Volunteer[]

  @@map("volunteer_types")
}

model EducationLevel {
  id         String      @id @default(uuid())
  code       String      @unique
  education  String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?   @db.Timestamp(6)
  volunteers Volunteer[]

  @@map("education_levels")
}

model Occupation {
  id         String      @id @default(uuid())
  code       String      @unique
  occupation String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?   @db.Timestamp(6)
  volunteers Volunteer[]

  @@map("occupations")
}

enum Gender {
  M
  F
}

enum BloodType {
  A
  B
  AB
  O
  Unknown
}

enum Status {
  active
  inactive
}
